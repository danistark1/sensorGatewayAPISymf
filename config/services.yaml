# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Listeners\PostListener:
        tags:
            - { name: doctrine.event_listener, event: postPersist }
#            - { name: doctrine.event_listener, event: postFlush }

        # Common handler that will allow us to log various information
    monolog.db_handler:
        class: App\Logger\MonologDBHandler
        public: true
            # The 'services' type handlers must be configured manually, as specified here: https://github.com/symfony/monolog-bundle/issues/116
            # The arguments that will go into the constructor
        arguments:
                - '@doctrine.orm.entity_manager'
                - !php/const Monolog\Logger::DEBUG
                # 'Bubble' argument to false: Handlers after this one will not be called if the log has already been taken into account
                - false

        # Handler errors, filtering logs whose level is lower than "ERROR"
    monolog.error_db_handler:
        class: App\Logger\MonologDBHandler
            # The arguments that will go into the constructor
        arguments:
                - '@doctrine.orm.entity_manager'
                - !php/const Monolog\Logger::ERROR

        # ...

